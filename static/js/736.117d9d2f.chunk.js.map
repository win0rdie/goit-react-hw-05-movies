{"version":3,"file":"static/js/736.117d9d2f.chunk.js","mappings":"+SAEaA,EAAUC,mCAEhB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gFACCC,EADD,6CAC6CD,EAD7C,oBACgEH,GADhE,kBAGoBK,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,uCAMHC,QAAQC,MAAM,sBAAd,MANG,kBAOI,MAPJ,gFAWA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCN,EADD,mEACmEJ,GADnE,kBAGoBK,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,uCAMHC,QAAQC,MAAM,+BAAd,MANG,kBAOI,MAPJ,gFAWA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BR,GAA/B,gFACCC,EADD,6CAC6CD,EAD7C,4BACwEH,GADxE,kBAGoBK,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,uCAMHC,QAAQC,MAAM,8BAAd,MANG,kBAOI,MAPJ,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BT,GAA/B,gFACCC,EADD,6CAC6CD,EAD7C,4BACwEH,GADxE,kBAGoBK,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,uCAMHC,QAAQC,MAAM,8BAAd,MANG,kBAOI,MAPJ,gFAWA,IAAMI,EAAY,mCAAG,WAAMC,GAAN,gFACpBV,EADoB,4DACuCJ,EADvC,kBACwDc,GADxD,SAGHT,EAAAA,EAAAA,IAAUD,GAHP,cAGpBE,EAHoB,yBAInBA,EAASC,KAAKQ,SAJK,2CAAH,qD,+JC9CZC,EAAqBC,EAAAA,GAAAA,IAAH,uEAKlBC,EAAgBD,EAAAA,GAAAA,GAAH,qFAMbE,EAAaF,EAAAA,GAAAA,GAAH,oLASVG,EAAiBH,EAAAA,GAAAA,GAAH,sQAadI,EAAcJ,EAAAA,GAAAA,IAAH,wJASXK,EAAkBL,EAAAA,GAAAA,IAAH,0FAMfM,EAAaN,EAAAA,GAAAA,KAAH,qEAKVO,EAAaP,EAAAA,GAAAA,KAAH,wC,SCxCR,SAASQ,EAAT,GAA4B,IAAZtB,EAAW,EAAXA,QAC7B,GAAwBuB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,qGACHnB,EAAAA,EAAAA,IAAgBR,GADb,OACnB4B,EADmB,OAEzBH,EAAQG,EAAQJ,MAAQ,IAFC,2CAAH,qDAIxBG,GACD,GAAE,CAAC3B,KAGF,UAACa,EAAD,YACE,SAACE,EAAD,yBACA,SAACC,EAAD,UACGQ,EAAKK,OAAS,EACbL,EAAKM,KAAI,WAAwCC,GAAxC,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACP,UAAClB,EAAD,WACGkB,GACC,SAACjB,EAAD,CACEkB,IAAG,0CAAqCD,GACxCE,IAAG,UAAKJ,EAAL,yBAGL,SAACf,EAAD,CACEkB,IAAI,0DACJC,IAAI,gBAGR,UAAClB,EAAD,YACE,SAACC,EAAD,UAAaa,KACb,SAACZ,EAAD,UAAaa,SAdjB,UAAwBF,EAAxB,YAA8BD,GADvB,KAoBT,0CAAQ,eAKjB,C","sources":["api/defaultApi.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const API_KEY = process.env.REACT_APP_API_KEY;\n\nexport async function getMovieDetails(movieId) {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting movie', error);\n    return null;\n  }\n}\n\nexport async function getMoviesTrending() {\n  const url = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting movie trending', error);\n    return null;\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting movie credits', error);\n    return null;\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting movie reviews', error);\n    return null;\n  }\n}\n\nexport const searchMovies = async query => {\n  const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`;\n\n  const response = await axios.get(url);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const MovieContainerCast = styled.div`\n  padding: 10px 50px;\n  margin-bottom: 20px;\n`;\n\nexport const StyledHeading = styled.h2`\n  font-size: 1.5rem;\n  color: #333;\n  text-align: center;\n`;\n\nexport const StyledList = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 1rem;\n  height: 150px;\n  padding-left: 0;\n`;\n\nexport const StyledListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f5f5f5;\n  border-radius: 5px;\n  text-align: left;\n  /* width: 150px; */\n  height: 100%;\n`;\n\nexport const StyledImage = styled.img`\n  width: 100%;\n  height: 200px;\n  /* height: 100%; */\n  object-fit: cover;\n  border-radius: 10%;\n  margin-bottom: 0.5rem;\n`;\n\nexport const StyledTextActor = styled.div`\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const StyledName = styled.span`\n  font-weight: bold;\n  margin-right: 10px;\n`;\n\nexport const StyledRole = styled.span`\n  color: #666;\n`;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieCredits } from 'api/defaultApi';\n\nimport {\n  MovieContainerCast,\n  StyledHeading,\n  StyledImage,\n  StyledList,\n  StyledListItem,\n  StyledName,\n  StyledRole,\n  StyledTextActor,\n} from './Cast.styled';\n\nexport default function Cast({ movieId }) {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMoviesCredits = async () => {\n      const credits = await getMovieCredits(movieId);\n      setCast(credits.cast || []);\n    };\n    fetchMoviesCredits();\n  }, [movieId]);\n\n  return (\n    <MovieContainerCast>\n      <StyledHeading>Cast List</StyledHeading>\n      <StyledList>\n        {cast.length > 0 ? (\n          cast.map(({ id, name, character, profile_path }, index) => (\n            <StyledListItem key={`${id}-${index}`}>\n              {profile_path ? (\n                <StyledImage\n                  src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                  alt={`${name}'s profile picture`}\n                />\n              ) : (\n                <StyledImage\n                  src=\"https://via.placeholder.com/200x200.png?text=No+Picture\"\n                  alt=\"No Picture\"\n                />\n              )}\n              <StyledTextActor>\n                <StyledName>{name}</StyledName>\n                <StyledRole>{character}</StyledRole>\n              </StyledTextActor>\n            </StyledListItem>\n          ))\n        ) : (\n          <li key=\"no-cast\">No cast found.</li>\n        )}\n      </StyledList>\n    </MovieContainerCast>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n"],"names":["API_KEY","process","getMovieDetails","movieId","url","axios","response","data","console","error","getMoviesTrending","getMovieCredits","getMovieReviews","searchMovies","query","results","MovieContainerCast","styled","StyledHeading","StyledList","StyledListItem","StyledImage","StyledTextActor","StyledName","StyledRole","Cast","useState","cast","setCast","useEffect","fetchMoviesCredits","credits","length","map","index","id","name","character","profile_path","src","alt"],"sourceRoot":""}